# Copyright (C) Markus Franz Xaver Johannes Oberhumer
# compile with ALL compilers that are pre-installed on the GitHub image
# see https://github.com/actions/runner-images.git

name: 'CC - GitHub all macOS 11'
'on':
  schedule: [cron: '00 2 * * 2'] # run weekly Tuesday 02:00 UTC
  workflow_dispatch: null
env:
  CMAKE_REQUIRED_QUIET: 'OFF'
  CMAKE_VERBOSE_MAKEFILE: 'ON'
  CTEST_OUTPUT_ON_FAILURE: 'ON'
  DEBIAN_FRONTEND: noninteractive
  UPX_CMAKE_CONFIG_FLAGS: -Wdev --warn-uninitialized
  UPX_CONFIG_EXPECT_THREADS: 'ON'
  UPX_DEBUG_FORCE_PACK_MACOS: 1 # macos-11
  VERBOSE: 1

  # these are exactly like the GITHUB_xxx default environment variables
  REMOTE_REF_NAME: devel
  REMOTE_REF_TYPE: branch         # branch OR tag
  REMOTE_REPOSITORY: upx/upx-workflows-github-weekly
  REMOTE_SERVER_URL: https://github.com
  REMOTE_SHA: '0000000000000000000000000000000000000000' # will get updated below

jobs:
  CC: # uses cmake + make
    if: github.repository_owner == 'upx'

    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        include:
          - { cc: 'clang', cxx: 'clang++' }           # AppleClang-13.0.0 (Xcode-13.2.1)
          # { cc: 'gcc', cxx: 'g++' }                 # => same as clang
          - { cc: 'clang-15', cxx: 'clang++-15' }
####      - { cc: 'clang-16', cxx: 'clang++-16' }
          - { cc: 'clang-17', cxx: 'clang++-17' }
          - { cc: 'gcc-10', cxx: 'g++-10' }
          - { cc: 'gcc-11', cxx: 'g++-11' }
          - { cc: 'gcc-12', cxx: 'g++-12' }
          - { cc: 'gcc-13', cxx: 'g++-13' }
          - { cc: 'gcc-10 -static-libgcc', cxx: 'g++-10 -static-libgcc -static-libstdc++' }
          - { cc: 'gcc-11 -static-libgcc', cxx: 'g++-11 -static-libgcc -static-libstdc++' }
          - { cc: 'gcc-12 -static-libgcc', cxx: 'g++-12 -static-libgcc -static-libstdc++' }
          - { cc: 'gcc-13 -static-libgcc', cxx: 'g++-13 -static-libgcc -static-libstdc++' }

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

    steps:

      - name: 'Display environment'
        run: |
          uname -a; pwd; id; umask
          env | LC_ALL=C sort
      - run: brew list --versions
        if: ${{ matrix.cc == 'clang' }} # only once per workflow

      - name: ${{ format('Check out {0}/{1} {2} {3} source code', env.REMOTE_SERVER_URL, env.REMOTE_REPOSITORY, env.REMOTE_REF_TYPE, env.REMOTE_REF_NAME) }}
        run: |
          # git config
          git config --global core.autocrlf false
          git config --global --add safe.directory '*'
          # install Self, needed for config file below
          ##git clone --branch "$GITHUB_REF_NAME" --depth 1 "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" ../Self

          git clone --branch "$REMOTE_REF_NAME" --depth 1 "$REMOTE_SERVER_URL/$REMOTE_REPOSITORY" .
          test -f ./.gitmodules && git submodule update --init
          # TODO: handle REMOTE_REF_TYPE == "tag"
          # update environment
          rev="$(git rev-parse HEAD)"
          echo "REMOTE_SHA=$rev" >> $GITHUB_ENV

      - name: 'Update PATH'
        if: ${{ startsWith(matrix.cc, 'clang-') }}
        run: |
          test -z "$HOMEBREW_PREFIX" && HOMEBREW_PREFIX="$(brew --prefix)"
          echo "HOMEBREW_PREFIX=$HOMEBREW_PREFIX" >> $GITHUB_ENV
          if test "$CC" = "clang-15"; then
            echo "PATH=$HOMEBREW_PREFIX/opt/llvm@15/bin:$PATH" >> $GITHUB_ENV
            echo "CXX=$HOMEBREW_PREFIX/opt/llvm@15/bin/clang++" >> $GITHUB_ENV
          elif test "$CC" = "clang-16"; then
            echo "PATH=$HOMEBREW_PREFIX/opt/llvm@16/bin:$PATH" >> $GITHUB_ENV
            echo "CXX=$HOMEBREW_PREFIX/opt/llvm@16/bin/clang++" >> $GITHUB_ENV
          elif test "$CC" = "clang-17"; then
            echo "PATH=$HOMEBREW_PREFIX/opt/llvm@17/bin:$PATH" >> $GITHUB_ENV
            echo "CXX=$HOMEBREW_PREFIX/opt/llvm@17/bin/clang++" >> $GITHUB_ENV
            # @BUG clang-17: have to disable sanitize, otherwise programs crash on indirect jumps(?)
            echo "UPX_CONFIG_DISABLE_SANITIZE=ON" >> $GITHUB_ENV
          fi

      - name: ${{ format('Build Debug with {0} and {1}', matrix.cc, matrix.cxx) }}
        run: 'make build/debug'
      - name: ${{ format('Build Release with {0} and {1}', matrix.cc, matrix.cxx) }}
        run: 'make build/release'

      - name: 'Run tests'
        run: |
          ctest --test-dir build/debug
          ctest --test-dir build/release
          if test -f ./misc/testsuite/test_symlinks.sh; then true;
            #(cd build/release && bash ../../misc/testsuite/test_symlinks.sh) # macos-11 lacks "readlink -f"
          fi
          true
